## This test file was generated by Claude -- only contains most simple tests; more detailed tests will be run on the non-utils modules

import pytest
import numpy as np
import xarray as xr
import geopandas as gpd
import tempfile
import os, sys
from pathlib import Path
from shapely.geometry import Polygon

# Import your functions (adjust import path as needed)
sys.path.append('/u/project/eordway/shared/surp_cd/fire_recovery')
from workflow.utils.geo_utils import (
    export_to_tiff,
    clip_raster_to_poly,
    buffer_firepoly,
    reproj_align_rasters
)


class TestExportToTiff:
    """Test suite for export_to_tiff function"""
    
    @pytest.fixture
    def sample_dataarray(self):
        """Create a sample DataArray for testing"""
        # Create simple 3x3 raster with spatial reference
        data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)
        
        da = xr.DataArray(
            data,
            dims=["y", "x"],
            coords={
                "x": np.linspace(0, 2, 3),
                "y": np.linspace(0, 2, 3)
            },
            name="test_raster"
        )
        
        # Add CRS info (WGS84)
        da = da.rio.write_crs("EPSG:4326")
        return da
    
    def test_export_to_tiff_creates_file(self, sample_dataarray, tmp_path):
        """Test that export_to_tiff creates a file"""
        output_path = tmp_path / "test_output.tif"
        
        result_path = export_to_tiff(
            sample_dataarray, 
            str(output_path), 
            dtype_out="float32"
        )
        
        assert os.path.exists(result_path)
        assert result_path == str(output_path)
    
    def test_export_to_tiff_different_dtypes(self, sample_dataarray, tmp_path):
        """Test export with different data types"""
        dtypes_to_test = ["int16", "float32", "uint8"]
        
        for dtype in dtypes_to_test:
            if dtype=="uint8": nodata_val=0
            else: nodata_val=-9999
            output_path = tmp_path / f"test_{dtype}.tif"
            result_path = export_to_tiff(
                sample_dataarray, 
                str(output_path), 
                dtype_out=dtype,
                nodata=nodata_val
            )
            assert os.path.exists(result_path)


class TestClipRasterToPoly:
    """Test suite for clip_raster_to_poly function"""
    
    @pytest.fixture
    def sample_raster_and_poly(self, tmp_path):
        """Create sample raster and polygon for testing"""
        # Create larger raster
        data = np.random.rand(10, 10).astype(np.float32)
        da = xr.DataArray(
            data,
            dims=["y", "x"],
            coords={
                "x": np.linspace(-1, 1, 10),
                "y": np.linspace(-1, 1, 10)
            }
        ).rio.write_crs("EPSG:4326")
        
        # Create a small polygon in the center
        polygon = Polygon([(-0.5, -0.5), (0.5, -0.5), (0.5, 0.5), (-0.5, 0.5)])
        gdf = gpd.GeoDataFrame({'id': [1]}, geometry=[polygon], crs="EPSG:4326")
        
        # Save polygon to shapefile
        poly_path = tmp_path / "test_polygon.shp"
        gdf.to_file(poly_path)
        
        return da, str(poly_path)
    
    def test_clip_raster_reduces_size(self, sample_raster_and_poly):
        """Test that clipping reduces raster size"""
        raster, poly_path = sample_raster_and_poly
        original_size = raster.data.size
        
        clipped = clip_raster_to_poly(raster, poly_path)
        
        assert clipped.data.size < original_size
        assert isinstance(clipped, xr.DataArray)


class TestBufferFirepoly:
    """Test suite for buffer_firepoly function"""
    
    @pytest.fixture
    def sample_fire_shapefile(self, tmp_path):
        """Create a sample fire polygon shapefile"""
        # Create a simple polygon
        polygon = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)])
        
        # Create GeoDataFrame with required columns
        gdf = gpd.GeoDataFrame({
            'BurnBndAc': [100.5],
            'Ig_Date': [1640995200000]  # Timestamp in milliseconds
        }, geometry=[polygon], crs="EPSG:4326")
        
        shapefile_path = tmp_path / "fire_polygon.shp"
        gdf.to_file(shapefile_path)
        
        return str(shapefile_path)
    
    def test_buffer_firepoly_creates_buffered_file(self, sample_fire_shapefile):
        """Test that buffer_firepoly creates a buffered shapefile"""
        buffered_gdf, buffered_path = buffer_firepoly(
            sample_fire_shapefile, 
            buffer_distance=1000
        )
        
        assert os.path.exists(buffered_path)
        assert buffered_path.endswith("_buffered.shp")
        assert isinstance(buffered_gdf, gpd.GeoDataFrame)
        assert len(buffered_gdf) >= 1
    
    def test_buffer_increases_area(self, sample_fire_shapefile):
        """Test that buffering increases polygon area"""
        # Read original
        original_gdf = gpd.read_file(sample_fire_shapefile)
        original_area = original_gdf.geometry.area.sum()
        
        # Buffer
        buffered_gdf, _ = buffer_firepoly(sample_fire_shapefile, buffer_distance=1000)
        
        # Compare areas (need to project to calculate meaningful area)
        original_utm = original_gdf.to_crs(original_gdf.estimate_utm_crs())
        buffered_utm = buffered_gdf.to_crs(buffered_gdf.estimate_utm_crs())
        
        assert buffered_utm.geometry.area.sum() > original_utm.geometry.area.sum()


class TestReprojAlignRasters:
    """Test suite for reproj_align_rasters function"""
    
    @pytest.fixture
    def sample_rasters(self):
        """Create sample rasters with different CRS"""
        # Target raster in WGS84
        target = xr.DataArray(
            np.ones((5, 5)),
            dims=["y", "x"],
            coords={
                "x": np.linspace(-1, 1, 5),
                "y": np.linspace(-1, 1, 5)
            }
        ).rio.write_crs("EPSG:4326")
        
        # Raster to reproject (same CRS for simplicity, but different grid)
        to_reproj = xr.DataArray(
            np.ones((3, 3)) * 2,
            dims=["y", "x"],
            coords={
                "x": np.linspace(-0.5, 0.5, 3),
                "y": np.linspace(-0.5, 0.5, 3)
            }
        ).rio.write_crs("EPSG:4326")
        
        return target, to_reproj
    
    def test_reproj_align_returns_correct_number(self, sample_rasters):
        """Test that function returns correct number of rasters"""
        target, to_reproj = sample_rasters
        
        result = reproj_align_rasters("reproj", target, to_reproj)
        
        assert len(result) == 2  # target + 1 reprojected
        assert isinstance(result[0], xr.DataArray)
        assert isinstance(result[1], xr.DataArray)
    
    def test_reproj_match_changes_shape(self, sample_rasters):
        """Test that reproj_match changes raster shape to match target"""
        target, to_reproj = sample_rasters
        original_shape = to_reproj.shape
        
        _, reprojected = reproj_align_rasters("reproj_match", target, to_reproj)
        
        assert reprojected.shape == target.shape
        assert reprojected.shape != original_shape


# Integration test
class TestIntegration:
    """Integration tests combining multiple functions"""
    
    def test_export_and_clip_workflow(self, tmp_path):
        """Test a typical workflow: create raster, export, then clip"""
        # Create test data
        data = np.random.rand(10, 10).astype(np.float32)
        da = xr.DataArray(
            data,
            dims=["y", "x"],
            coords={
                "x": np.linspace(-2, 2, 10),
                "y": np.linspace(-2, 2, 10)
            },
            name="integration_test"
        ).rio.write_crs("EPSG:4326")
        
        # Export to TIFF
        tiff_path = tmp_path / "test_raster.tif"
        export_to_tiff(da, str(tiff_path), "float32")
        
        # Create clipping polygon
        polygon = Polygon([(-1, -1), (1, -1), (1, 1), (-1, 1)])
        gdf = gpd.GeoDataFrame({'id': [1]}, geometry=[polygon], crs="EPSG:4326")
        poly_path = tmp_path / "clip_poly.shp"
        gdf.to_file(poly_path)
        
        # Test clipping works
        clipped = clip_raster_to_poly(da, str(poly_path))
        
        assert isinstance(clipped, xr.DataArray)
        assert clipped.data.size < da.data.size